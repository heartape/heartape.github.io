(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{497:function(t,_,s){"use strict";s.r(_);var v=s(0),a=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-tcp-ip协议体系的认知"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-ip协议体系的认知"}},[t._v("#")]),t._v(" 1.\tTCP/IP协议体系的认知")]),t._v(" "),_("p",[t._v("是利用 IP 进行通信时所必须用到的协议群的统称.")]),t._v(" "),_("p",[t._v("一部分处于用户态，一部分处于内核态。数据链路层，网络层，传输层封装于操作系统内核态。应用层存在于操作系统的用户空间，包括DNS，FTP，HTTPs，HTTP，工作中接触较多的是应用层的部分。但其它层的原理必须理解，面试考察。")]),t._v(" "),_("p",[t._v("层与层之间下层对上层是透明的，传输在每一层是对等的。")]),t._v(" "),_("h2",{attrs:{id:"_2-数据链路层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据链路层"}},[t._v("#")]),t._v(" 2.\t数据链路层")]),t._v(" "),_("h3",{attrs:{id:"_1-以太网数据帧格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-以太网数据帧格式"}},[t._v("#")]),t._v(" 1.\t以太网数据帧格式")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/Ethernet2.jpg",alt:"Ethernet 2"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/802.3.png",alt:"802.3"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/Ethernet2%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%B8%A7%E5%85%B7%E4%BD%93%E5%AD%97%E6%AE%B5.jpg",alt:"Ethernet II格式数据帧具体字段"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/IEEE-802.3%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%B8%A7%E5%85%B7%E4%BD%93%E5%AD%97%E6%AE%B5.jpg",alt:"IEEE 802.3格式数据帧具体字段"}})]),t._v(" "),_("ul",[_("li",[t._v("DMAC（Destination MAC）是目的MAC地址。DMAC字段长度为6个字节，标识帧的接收者;")]),t._v(" "),_("li",[t._v("SMAC（Source MAC）是源MAC地址。SMAC字段长度为6个字节，标识帧的发送者;")]),t._v(" "),_("li",[t._v("类型字段（Type）**用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0806的帧代表ARP协议帧;")]),t._v(" "),_("li",[t._v("数据字段(Data)**是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节;")]),t._v(" "),_("li",[t._v("循环冗余校验字段（FCS）**提供了一种错误检测机制，用于检验传输过程中帧的完整性。该字段长度为4个字节。")]),t._v(" "),_("li",[t._v("Length字段定义了Data字段包含的字节数;")]),t._v(" "),_("li",[t._v("逻辑链路控制LLC（Logical Link Control）由目的服务访问点DSAP（Destination Service Access Point）、源服务访问点SSAP（Source Service Access Point）和Control字段组成;")]),t._v(" "),_("li",[t._v("SNAP（Sub-network Access Protocol）由机构代码（Org Code）和类型（Type）字段组成。Org code三个字节都为0。Type字段的含义与Ethernet_II帧中的Type字段相同;")])]),t._v(" "),_("h3",{attrs:{id:"_2-mtu（最大传输单元）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-mtu（最大传输单元）"}},[t._v("#")]),t._v(" 2.\tMTU（最大传输单元）")]),t._v(" "),_("p",[t._v("将报文(data部分)限制在一定的长度，一般46byte到1500byte,以太网可以将报文大概率传输到目的地.")]),t._v(" "),_("h3",{attrs:{id:"_3-arp协议和rarp协议（网络层和链路层的中间层）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-arp协议和rarp协议（网络层和链路层的中间层）"}},[t._v("#")]),t._v(" 3.\tARP协议和RARP协议（网络层和链路层的中间层）")]),t._v(" "),_("ul",[_("li",[t._v("ARP:地址解析协议，即Address Resolution Protocol，是根据IP地址获取物理地址的一个TCP/IP协议。")]),t._v(" "),_("li",[t._v("RARP:反向地址转换协议，Reverse Address Resolution Protocol。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/ARP%E6%8A%A5%E6%96%87.jpg",alt:"ARP报文"}})]),t._v(" "),_("h4",{attrs:{id:"arp报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arp报文"}},[t._v("#")]),t._v(" ARP报文:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("ARP request报文（广播报文）来获取以太网地址(MAC地址)。而广播报文只会在广播域中传播，路由器可以隔离广播域。")])]),t._v(" "),_("li",[_("p",[t._v("以太网报头中的前两个字段是以太网的源地址和目的地址;")])]),t._v(" "),_("li",[_("p",[t._v("两个字节长的以太网帧类型表示后面数据的类型。对于ARP请求或应答来说，该字段的值为0x0806;")])]),t._v(" "),_("li",[_("p",[t._v("硬件类型字段表示硬件地址的类型。它的值为1即表示以太网地址。协议类型字段表示要映射的协议地址类型。它的值为0x0800即表示IP地址;")])]),t._v(" "),_("li",[_("p",[t._v("硬件地址长度和协议地址长度分别指出硬件地址和协议地址的长度，在以太网上IP地址的ARP请求或应答，它们的值分别为6和4;")])]),t._v(" "),_("li",[_("p",[t._v("操作字段指出四种操作类型，它们是ARP请求（值为1）、ARP应答（值为2）、RARP请求（值为3）和RARP应答（值为4）;")])]),t._v(" "),_("li",[_("p",[t._v("查询原理:")])])]),t._v(" "),_("p",[t._v("主机发送信息时，将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；")]),t._v(" "),_("ul",[_("li",[t._v("缓存机制:")])]),t._v(" "),_("p",[t._v("ARP缓存表中保存这网络中各个电脑的IP地址和MAC地址的对照关系。主机将收到的物理地址和IP地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。")]),t._v(" "),_("h4",{attrs:{id:"rarp报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rarp报文"}},[t._v("#")]),t._v(" RARP报文:")]),t._v(" "),_("p",[t._v("RARP分组的格式与ARP分组基本一致。它们之间主要的差别是RARP请求或应答的帧类型代码为0x8035，而且RARP请求的操作代码为3，应答操作代码为4;")]),t._v(" "),_("ul",[_("li",[t._v("查询原理:")])]),t._v(" "),_("p",[t._v("反向地址转换协议（RARP）允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网的网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用;")]),t._v(" "),_("h2",{attrs:{id:"_3-网络层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络层"}},[t._v("#")]),t._v(" 3.\t网络层")]),t._v(" "),_("h3",{attrs:{id:"_1-ip首部格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-ip首部格式"}},[t._v("#")]),t._v(" 1.\tIP首部格式")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/IP%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.jpg",alt:"IP首部格式"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("版本:占4位，指IP协议的版本。通信双方使用的IP协议的版本必须一致;")])]),t._v(" "),_("li",[_("p",[t._v("首部长度:占4位，可表示的最大十进制数值是15,首部长度字段所表示数的单位是32位字(1个32位字长是4字节);")])]),t._v(" "),_("li",[_("p",[t._v("服务类型:旧标准中叫服务类型，但实际上-直没有被使用过。后改名为区分服务DS,只有在使用区分服务时，这个字段才起作用;")])]),t._v(" "),_("li",[_("p",[t._v("总长度:总长度指首部和数据之和的长度;")])]),t._v(" "),_("li",[_("p",[t._v("标识(identification):占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1, 并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报片的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报;")])]),t._v(" "),_("li",[_("p",[t._v("标志(flag):占3位，但目前只有两位有意义。最低位记为MF (More Fragment)。 MF = 1即表示后面“还有分片”的数据报。MF = 0表示这已是若干数据报片中的最后-一个。中间的一位记为DF (Don't Fragment), 意思是“不能分片”。只有当DF=0时才允许分片。")])]),t._v(" "),_("li",[_("p",[t._v("片偏移:占13位。片偏移指出:较长的分组在分片后，某片在原分组中的相对位置;")])]),t._v(" "),_("li",[_("p",[t._v("生存时间:占8位，生存时间字段常用的英文缩写是TTL (Time To Live), 表明这是数据报在网络中的寿命。最初的设计是以秒作为TTL值的单位。每经过一个路由器时，就把TTL减去数据报在路由器所消耗掉的一-段时间。然而随着技术的进步，路由器处理数据报所需的时间不断在缩短，一般都远远小于1秒，后来就把TTL字段的功能改为“跳数限制”(但名称不变)。因此，现在ttl的单位不再是秒，而是跳数。")])]),t._v(" "),_("li",[_("p",[t._v("首部检验和:占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一一个路由器，路由器都要重新计算一下首部检验和(一些字段，如生存时间、标志、片偏移等都可能发生变化)。")])])]),t._v(" "),_("h3",{attrs:{id:"_2-ip分片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-ip分片"}},[t._v("#")]),t._v(" 2.\tIP分片")]),t._v(" "),_("p",[t._v("当IP数据报超过帧的MTU(最大传输单元)时，它将会被分片传输。")]),t._v(" "),_("p",[_("strong",[t._v("标识(identification)")]),t._v(","),_("strong",[t._v("标志(flag)")]),t._v(","),_("strong",[t._v("片偏移")]),t._v("三个字段与IP分片相关,"),_("strong",[t._v("片偏移")]),t._v("确定分片顺序,**标志(flag)**确定分片是否全部到达")]),t._v(" "),_("p",[t._v("一个IP数据报的每个分片都具有自己的IP头部信息，它们"),_("strong",[t._v("都具有相同的标识值")]),t._v("，但是"),_("strong",[t._v("具有不同的位偏移")]),t._v("，且"),_("strong",[t._v("除了最后一个分片外，其他分片都将设置MF标志")]),t._v("。此外，"),_("strong",[t._v("每个分片的IP头部的总长度字段将被设置为该分片的长度")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%88%86%E7%89%87.jpg",alt:"分片"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%88%86%E7%89%871.jpg",alt:"分片1"}})]),t._v(" "),_("h4",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点:")]),t._v(" "),_("ol",[_("li",[t._v("分片带来的性能消耗")])]),t._v(" "),_("p",[t._v("消耗发送方、接收方一定的CPU和接收方内存,因为接收方要为接收到的每个分片报文分配内存空间,便于所有报文到达后完成重组;")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("分片丢包导致的重传问题")])]),t._v(" "),_("p",[t._v("如果某个分片报文在网络传输过程中丢失，那么接收方将无法完成重组;")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("分片攻击")])]),t._v(" "),_("p",[t._v("黑客构造的分片报文，但是不向接收方发送最后一个分片报文，持续消耗内存")]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("安全隐患")])]),t._v(" "),_("p",[t._v("由于分片只有第一个分片报文具有四层信息，影响路由器、防火墙等中间设备在做访问控制策略匹配。")]),t._v(" "),_("h4",{attrs:{id:"避免ip分片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#避免ip分片"}},[t._v("#")]),t._v(" 避免IP分片:")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("限制请求的MTU")])]),t._v(" "),_("li",[_("p",[t._v("传输路径MTU的发现,即寻找整个路径中所能通过的最小MTU")])])]),t._v(" "),_("h3",{attrs:{id:"_3-ip选路"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-ip选路"}},[t._v("#")]),t._v(" 3.\tIP选路")]),t._v(" "),_("p",[t._v("使用route print命令打印路由表")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E8%B7%AF%E7%94%B1%E8%A1%A8.png",alt:"路由表"}})]),t._v(" "),_("p",[_("strong",[t._v("度量值")]),t._v("意思是这台路由器去这个目标网络的代价，不同路由来源这个值的算法也不一样，直连为0。")]),t._v(" "),_("h3",{attrs:{id:"_4-icmp（因特网控制报文协议）（理解为网络层和传输层的中间协议）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-icmp（因特网控制报文协议）（理解为网络层和传输层的中间协议）"}},[t._v("#")]),t._v(" 4.\tICMP（因特网控制报文协议）（理解为网络层和传输层的中间协议）")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/icmp1.jpg",alt:"icmp1"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/icmp2.jpg",alt:"icmp2"}})]),t._v(" "),_("p",[t._v("ICMP经常被认为是IP层的一个组成部分,ICMP报文是在IP数据报内部被传输的。它传递差错报文以及其他需要注意的信息。ICMP报文通常被IP层或更高层协议（TCP或UDP）使用。")]),t._v(" "),_("p",[_("strong",[t._v("不发送差错报文")]),t._v(":")]),t._v(" "),_("ol",[_("li",[t._v("ICMP差错报文（但是，ICMP查询报文可能会产生ICMP差错报文）。")]),t._v(" "),_("li",[t._v("目的地址是广播地址（见图3-9）或多播地址（D类地址，见图1-5）的IP数据报。")]),t._v(" "),_("li",[t._v("作为链路层广播的数据报。")]),t._v(" "),_("li",[t._v("不是IP分片的第一片（将在11.5节介绍分片）。")]),t._v(" "),_("li",[t._v("源地址不是单个主机的数据报。这就是说，源地址不能为零地址、环回地址、广播地址或多播地址。")])]),t._v(" "),_("p",[_("strong",[t._v("差错报文")]),t._v(":")]),t._v(" "),_("p",[t._v("1."),_("strong",[t._v("终点不可达")]),t._v("：终点不可达分为:网络不可达，主机不可达，协议不可达，端口不可达，需要分片但DF比特已置为1，以及源路由失败等六种情况，其代码字段分别置为0至5。当出现以上六种情况时就向源站发送终点不可达报文。")]),t._v(" "),_("p",[t._v("2."),_("strong",[t._v("源站抑制")]),t._v("：当路由器或主机由于拥塞而丢弃数据报时，就向源站发送源站抑制报文，使源站知道应当将数据报的发送速率放慢。")]),t._v(" "),_("p",[t._v("3."),_("strong",[t._v("时间超过")]),t._v("：当路由器收到生存时间为零的数据报时，除丢弃该数据报外，还要向源站发送时间超过报文。当目的站在预先规定的时间内不能收到一个数据报的全部数据报片时，就将已收到的数据报片都丢弃，并向源站发送时间超过报文。")]),t._v(" "),_("p",[t._v("4."),_("strong",[t._v("参数问题")]),t._v("：当路由器或目的主机收到的数据报的首部中的字段的值不正确时，就丢弃该数据报，并向源站发送参数问题报文。")]),t._v(" "),_("p",[t._v("5."),_("strong",[t._v("改变路由")]),t._v(":（重定向）路由器将改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器。")]),t._v(" "),_("p",[_("strong",[t._v("查询报文")]),t._v("：")]),t._v(" "),_("p",[t._v("1."),_("strong",[t._v("回送请求或回答")]),t._v(":用于进行通信的主机或路由之间，判断发送数据包是否成功到达对端的消息。可以向对端主机发送回送请求消息，也可以接收对端主机回来的回送应答消息。"),_("strong",[t._v("PING命令")])]),t._v(" "),_("p",[t._v("2."),_("strong",[t._v("时间戳请求或回答")]),t._v(":可以向那些主机或路由器发送 ICMP 时间戳请求消息，然后通过接收 ICMP 时间戳应答消息获取时间信息。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E6%97%B6%E9%97%B4%E6%88%B3.jpg",alt:"时间戳"}})]),t._v(" "),_("h2",{attrs:{id:"_4-传输层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-传输层"}},[t._v("#")]),t._v(" 4.\t传输层")]),t._v(" "),_("h3",{attrs:{id:"_1-udp协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-udp协议"}},[t._v("#")]),t._v(" 1.\tUDP协议")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/udp.jpg",alt:"udp"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/udp%E9%A6%96%E9%83%A8.jpg",alt:"udp首部"}})]),t._v(" "),_("p",[t._v("UDP特点:")]),t._v(" "),_("p",[t._v("1."),_("strong",[t._v("无连接")]),t._v(";")]),t._v(" "),_("p",[t._v("2."),_("strong",[t._v("不可靠")]),t._v(";")]),t._v(" "),_("p",[t._v("3."),_("strong",[t._v("没有拥塞控制")]),t._v(",能容忍一些数据的丢失，但是不能允许有较大的时延;")]),t._v(" "),_("p",[t._v("4."),_("strong",[t._v("面向报文")]),t._v(";")]),t._v(" "),_("h3",{attrs:{id:"_2-tcp协议（面试集中考察）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp协议（面试集中考察）"}},[t._v("#")]),t._v(" 2.\tTCP协议（面试集中考察）")]),t._v(" "),_("h4",{attrs:{id:"_1-特点-首部字段-可靠机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-特点-首部字段-可靠机制"}},[t._v("#")]),t._v(" 1.\t 特点 + 首部字段 + 可靠机制")]),t._v(" "),_("p",[t._v("特点: TCP提供一种面向连接的可靠的字节流服务")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/TCP.jpg",alt:"TCP"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/TCP%E9%A6%96%E9%83%A8.jpg",alt:"TCP首部"}})]),t._v(" "),_("p",[t._v("首部字段:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("序号:为当前端成功发送的数据位数（由计算机生成的一个随机数作为其初始值，以后再将每次成功转发过去的字节数累加到初始值上表示数据的位置 ）;")])]),t._v(" "),_("li",[_("p",[t._v("确认序号:为当前端成功接收的数据位数+1。（表示下一次应该收到的数据位置，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收）;")])]),t._v(" "),_("li",[_("p",[t._v("标志位:字段长为6，每一位从左到右分别为：URG、ACK、PSH、RST、SYN、FIN。当对应的值为1，表示有具体含义:\nURG:紧急指针是否有效。为1，表示某一位需要被优先处理。\nACK:确认号是否有效，一般置为1。\nPSH:提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST :对方要求重新建立连接，复位。\nSYN:为1表示请求建立连接，并在其序列号的字段进行序列号的初始值设定。\nFIN:希望断开连接;")])]),t._v(" "),_("li",[_("p",[t._v("窗口大小:接收缓冲区的大小，TCP不允许发送超过此处所示大小的数据;")])]),t._v(" "),_("li",[_("p",[t._v("校验和:发送端填充，CRC校验，接收校验不通过，则认为数据有问题。和UDP的区别是，UDP校验的是数据本身，TCP校验的不仅包含TCP首部，而且包含TCP数据部分;")])]),t._v(" "),_("li",[_("p",[t._v("紧急指针:只有在URG为1时有效，该字段为1表示本报文的段中的紧急数据的指针。")])])]),t._v(" "),_("p",[t._v("可靠机制:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("应用数据被分成TCP最合适的发送数据块;")])]),t._v(" "),_("li",[_("p",[t._v("当TCP发送一个段之后，启动一个定时器，等待目的点确认收到报文，如果不能及时收到一个确认，将重发这个报文。")])]),t._v(" "),_("li",[_("p",[t._v("当TCP收到连接端发来的数据，就会推迟几分之一秒发送一个确认。")])]),t._v(" "),_("li",[_("p",[t._v("TCP将保持它首部和数据的检验和，这是一个端对端的检验和，目的在于检测数据在传输过程中是否发生变化。（有错误，就不确认，发送端就会重发）")])]),t._v(" "),_("li",[_("p",[t._v("TCP是以IP报文来传送，IP数据是无序的，TCP收到所有数据后进行排序，再交给应用层")])]),t._v(" "),_("li",[_("p",[t._v("IP数据报会重复，所以TCP会去重")])]),t._v(" "),_("li",[_("p",[t._v("TCP能提供流量控制，TCP连接的每一个地方都有固定的缓冲空间。TCP的接收端只允许另一端发送缓存区能接纳的数据。")])]),t._v(" "),_("li",[_("p",[t._v("TCP对字节流不做任何解释，对字节流的解释由TCP连接的双方应用层解释。")])])]),t._v(" "),_("h4",{attrs:{id:"_2-连接控制-：-三次握手，四次挥手，同时打开，同时关闭，半关闭（为什么需要-）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-连接控制-：-三次握手，四次挥手，同时打开，同时关闭，半关闭（为什么需要-）"}},[t._v("#")]),t._v(" 2. \t连接控制 ： 三次握手，四次挥手，同时打开，同时关闭，半关闭（为什么需要?）")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/TCP%E8%BF%9E%E6%8E%A5.jpg",alt:"TCP连接"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("三次握手:TCP是面向连接的,所以需要双方都确认连接的建立.("),_("strong",[t._v("SYN包=>ACK包+SYN包=>ACK包")]),t._v(")如果client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求.假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。")])]),t._v(" "),_("li",[_("p",[t._v("四次挥手:TCP是双全工(即客户端和服务器端可以互相发送和接收请求),需要双方都确认关闭连接.A发出结束报文FIN，收到B确认后A知道自己没有数据需要发送了，B知道A不再发送数据了，自己也不会接收数据了，但是此时A还是可以接收数据，B也可以发送数据；当B发出FIN报文的时候此时两边才会真正的断开连接，读写分开。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%90%8C%E6%97%B6%E6%89%93%E5%BC%80.jpg",alt:"同时打开"}})]),t._v(" "),_("ul",[_("li",[t._v("同时打开:两个应用程序同时彼此执行主动打开的情况;")])]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%90%8C%E6%97%B6%E5%85%B3%E9%97%AD.jpg",alt:"同时关闭"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("同时关闭:两个应用程序同时彼此执行主动关闭的情况;")])]),t._v(" "),_("li",[_("p",[t._v("半关闭:如果一方已经关闭或者异常终止连接而另外一方却还不知道，这样的连接就称为半关闭连接;")])])]),t._v(" "),_("h4",{attrs:{id:"_3-流量控制机制：滑动窗口-慢启动，拥塞避免，快速重传，快速恢复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-流量控制机制：滑动窗口-慢启动，拥塞避免，快速重传，快速恢复"}},[t._v("#")]),t._v(" 3. \t流量控制机制：滑动窗口,慢启动，拥塞避免，快速重传，快速恢复")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("滑动窗口:接收端主机向发送端主机通知自己可以接受数据的大小，于是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小;")])]),t._v(" "),_("li",[_("p",[t._v("慢启动:先把"),_("strong",[t._v("拥塞窗口 cwnd")]),t._v(" 设置为1个最大报文段MSS的数值，而后每收到一个对新的报文段的确认，就把拥塞窗口增加1个MSS的数值，这样拥塞窗口cwnd的值就随着传输轮次（一个轮次即发送完一个cwnd的MSS）呈指数级增长;")])]),t._v(" "),_("li",[_("p",[t._v("拥塞避免:为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个"),_("strong",[t._v("慢开始门限ssthresh")]),t._v("状态变量.当cwnd >= ssthresh时，就会进入“拥塞避免算法”，让拥塞窗口cwnd缓慢地增大，每收到1个ACK拥塞窗口cwnd = cwnd + 1/cwnd，即每经过一个传输轮次就把发送方的拥塞窗口cwnd加1。这样拥塞窗口cwnd按"),_("strong",[t._v("线性")]),t._v("规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多;")])]),t._v(" "),_("li",[_("p",[t._v("快速重传:发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0.png",alt:"快速重传"}})]),t._v(" "),_("ul",[_("li",[t._v("快速恢复:收到三个重复确认说明网络也不那么糟糕，并不需要重新回到慢启动进行，这样可能降低效率。所以协议栈会做如下工作：")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("拥塞窗口减半cwnd=cwnd/2")])])]),t._v(" "),_("blockquote",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("慢开始门限ssthresh=cwnd（减半后的值）")])])]),t._v(" "),_("h4",{attrs:{id:"_4-tcp超时重传机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp超时重传机制"}},[t._v("#")]),t._v(" 4.TCP超时重传机制")]),t._v(" "),_("p",[t._v("在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/TCP%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6.png",alt:"TCP超时重传机制"}})]),t._v(" "),_("p",[t._v("四个定时器:")]),t._v(" "),_("p",[t._v("1.重传计时器:当TCP发送报文段时，就创建该特定报文的重传计时器。可能发生两种情况：")]),t._v(" "),_("div",{staticClass:"language-text line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("1.若在计时器截止时间到之前收到了对此特定报文段的确认，则撤销此计时器。\n2.若在收到了对此特定报文段的确认之前计时器截止时间到，则重传此报文段，并将计时器复位。\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("p",[t._v("2.持久计时器:TCP为每一个链接使用一个持久计时器,持久计时器的值设置为重传时间的数值。但是，若没有收到从接收端来的响应，则需发送另一个探测报文段，并将坚持计时器的值加倍和复位。发送端继续发送探测报文段，将坚持计时器设定的值加倍和复位，直到这个值增大到门限值（通常是60秒）为止。在这以后，发送端每个60秒就发送一个探测报文，直到窗口重新打开。")]),t._v(" "),_("p",[t._v("3.保活计时器:每当服务器收到客户的信息，就将计时器复位。通常设置为两小时。若服务器过了两小时还没有收到客户的信息，他就发送探测报文段。若发送了10个探测报文段（每一个像个75秒）还没有响应，就假定客户除了故障，因而就终止了该连接。这种连接的断开当然不会使用四次握手，而是直接硬性的中断和客户端的TCP连接。")]),t._v(" "),_("p",[t._v("4.时间等待计时器:时间等待计时器是在四次握手的时候使用的,当客户端向服务器发送最后一次确认报文时，就设定一个时间等待及时器，等待2MSL时间后再结束连接。(MSL：最长报文段寿命，大小为30s~2分钟)等待2MSL时间为了保证服务器能够收到客户机发送的最后一个确认报文,并且在此时间内足以清空所有报文.")]),t._v(" "),_("h2",{attrs:{id:"_5-应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-应用层"}},[t._v("#")]),t._v(" 5.\t应用层")]),t._v(" "),_("h3",{attrs:{id:"_1-dns（域名解析）协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-dns（域名解析）协议"}},[t._v("#")]),t._v(" 1.\tDNS（域名解析）协议")]),t._v(" "),_("h4",{attrs:{id:"_1-域名空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-域名空间"}},[t._v("#")]),t._v(" 1.\t域名空间")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%9F%9F%E5%90%8D%E7%A9%BA%E9%97%B4.png",alt:"域名空间"}})]),t._v(" "),_("h4",{attrs:{id:"_2-指针查询（反向查找或逆向解析）基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-指针查询（反向查找或逆向解析）基本原理"}},[t._v("#")]),t._v(" 2.\t指针查询（反向查找或逆向解析）基本原理")]),t._v(" "),_("h4",{attrs:{id:"_3-dns缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns缓存"}},[t._v("#")]),t._v(" 3.\tDNS缓存")]),t._v(" "),_("p",[t._v("DNS返回了正确的IP之后，系统就会将这个结果临时储存起来。")]),t._v(" "),_("p",[t._v("主机解析域名的顺序:")]),t._v(" "),_("p",[t._v("1.浏览器缓存")]),t._v(" "),_("p",[t._v("2.找本机的hosts文件")]),t._v(" "),_("p",[t._v("3.路由缓存")]),t._v(" "),_("p",[t._v("4.找 DNS服务器(本地域名 、顶级域名、根域名)")]),t._v(" "),_("h3",{attrs:{id:"_2-ftp协议（活化石）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-ftp协议（活化石）"}},[t._v("#")]),t._v(" 2.\tFTP协议（活化石）")]),t._v(" "),_("h4",{attrs:{id:"_1-控制流和数据流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-控制流和数据流"}},[t._v("#")]),t._v(" 1. \t控制流和数据流")]),t._v(" "),_("p",[_("strong",[t._v("控制流")]),t._v(":客户端希望与FTP服务器建立上传下载的数据传输时，它首先向服务器的TCP 21端口发起一个建立连接的请求，FTP服务器接受来自客户端的请求，完成连接的建立过程，这样的连接就称为FTP控制连接。")]),t._v(" "),_("p",[_("strong",[t._v("数据流")]),t._v(":FTP控制连接建立之后，即可开始传输文件，传输文件的连接称为FTP数据连接。FTP数据连接就是FTP传输数据的过程，它有两种传输模式"),_("strong",[t._v("PASV 和 PORT")])]),t._v(" "),_("h4",{attrs:{id:"_2-两种工作模式：-pasv-和-port"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-两种工作模式：-pasv-和-port"}},[t._v("#")]),t._v(" 2. \t两种工作模式： PASV 和 PORT")]),t._v(" "),_("p",[_("strong",[t._v("主动模式 (PORT)")]),t._v(":客户端随机打开一个大于 1024 的端口向服务器的命令端口 P，即 21 端口，发起连接，同时开放N +1 端口监听，并向服务器发出 “port N+1” 命令，由服务器从它自己的数据端口 (20) 主动连接到客户端指定的数据端口 (N+1)。")]),t._v(" "),_("p",[_("strong",[t._v("被动模式 (PASV)")]),t._v(":命令连接和数据连接都由客户端发起，这样就解决了从服务器到客户端的数据端口的连接被防火墙过滤的问题.")]),t._v(" "),_("h4",{attrs:{id:"_3-各种指令和响应码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-各种指令和响应码"}},[t._v("#")]),t._v(" 3. \t各种指令和响应码")]),t._v(" "),_("p",[t._v('FTP 每个命令都有 3 到 4 个字母组成，命令后面跟参数，用空格分开。每个命令都以 "\\r\\n"结束。')]),t._v(" "),_("p",[t._v("USER: 指定用户名。通常是控制连接后第一个发出的命令。“USER gaoleyi\\r\\n”： 用户名为gaoleyi 登录。")]),t._v(" "),_("p",[t._v("PASS: 指定用户密码。该命令紧跟 USER 命令后。“PASS gaoleyi\\r\\n”：密码为 gaoleyi。")]),t._v(" "),_("p",[t._v("SIZE: 从服务器上返回指定文件的大小。“SIZE file.txt\\r\\n”：如果 file.txt 文件存在，则返回该文件的大小。")]),t._v(" "),_("p",[t._v("CWD: 改变工作目录。如：“CWD dirname\\r\\n”。")]),t._v(" "),_("p",[t._v("PASV: 让服务器在数据端口监听，进入被动模式。如：“PASV\\r\\n”。")]),t._v(" "),_("p",[t._v("PORT: 告诉 FTP 服务器客户端监听的端口号，让 FTP 服务器采用主动模式连接客户端。如：“PORT h1,h2,h3,h4,p1,p2”。")]),t._v(" "),_("p",[t._v("RETR: 下载文件。“RETR file.txt \\r\\n”：下载文件 file.txt。")]),t._v(" "),_("p",[t._v("STOR: 上传文件。“STOR file.txt\\r\\n”：上传文件 file.txt。")]),t._v(" "),_("p",[t._v("REST: 该命令并不传送文件，而是略过指定点后的数据。此命令后应该跟其它要求文件传输的 FTP 命令。“REST 100\\r\\n”：重新指定文件传送的偏移量为 100 字节。")]),t._v(" "),_("p",[t._v("QUIT: 关闭与服务器的连接。")]),t._v(" "),_("h4",{attrs:{id:"_4-断点续传和匿名ftp的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-断点续传和匿名ftp的概念"}},[t._v("#")]),t._v(" 4. \t断点续传和匿名FTP的概念")]),t._v(" "),_("p",[t._v("断点续传:需要使用命令 REST。如果在断开连接前，一个文件已经传输了 512 个字节。则断点续传开始的位置为 512，服务器会跳过传输文件的前 512 字节。")]),t._v(" "),_("p",[t._v("匿名FTP:用于对远程计算机的连接，这些计算机是作为匿名或客户用户进行连接的，以将公共文件传输到用户的本地计算机。")]),t._v(" "),_("h3",{attrs:{id:"_3-http协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-http协议"}},[t._v("#")]),t._v(" 3.\tHTTP协议")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/http%E7%89%88%E6%9C%AC.jpg",alt:"http版本"}})]),t._v(" "),_("h4",{attrs:{id:"_1-报文格式：请求报文，响应报文，请求头各种字段，响应头各种字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-报文格式：请求报文，响应报文，请求头各种字段，响应头各种字段"}},[t._v("#")]),t._v(" 1. \t报文格式：请求报文，响应报文，请求头各种字段，响应头各种字段")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/Http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84.png",alt:"Http请求消息结构"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg",alt:"请求头"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/HTTP%E5%93%8D%E5%BA%94-1617893032903.jpg",alt:"HTTP响应"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BE%8B.jpg",alt:"响应头例"}})]),t._v(" "),_("h5",{attrs:{id:"第一部分：请求行，用来说明请求类型-要访问的资源以及所使用的http版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一部分：请求行，用来说明请求类型-要访问的资源以及所使用的http版本"}},[t._v("#")]),t._v(" 第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.")]),t._v(" "),_("p",[t._v("GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。")]),t._v(" "),_("h5",{attrs:{id:"第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息"}},[t._v("#")]),t._v(" 第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息")]),t._v(" "),_("p",[t._v("从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等")]),t._v(" "),_("h5",{attrs:{id:"第三部分：空行，请求头部后面的空行是必须的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第三部分：空行，请求头部后面的空行是必须的"}},[t._v("#")]),t._v(" 第三部分：空行，请求头部后面的空行是必须的")]),t._v(" "),_("p",[t._v("即使第四部分的请求数据为空，也必须有空行。")]),t._v(" "),_("h5",{attrs:{id:"第四部分：请求数据也叫主体，可以添加任意的其他数据。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第四部分：请求数据也叫主体，可以添加任意的其他数据。"}},[t._v("#")]),t._v(" 第四部分：请求数据也叫主体，可以添加任意的其他数据。")]),t._v(" "),_("h4",{attrs:{id:"_2-http状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-http状态码"}},[t._v("#")]),t._v(" 2. \tHTTP状态码")]),t._v(" "),_("p",[t._v("1xx：指示信息--表示请求已接收，继续处理")]),t._v(" "),_("p",[t._v("2xx：成功--表示请求已被成功接收、理解、接受")]),t._v(" "),_("p",[t._v("3xx：重定向--要完成请求必须进行更进一步的操作")]),t._v(" "),_("p",[t._v("4xx：客户端错误--请求有语法错误或请求无法实现")]),t._v(" "),_("p",[t._v("5xx：服务器端错误--服务器未能实现合法的请求")]),t._v(" "),_("p",[t._v("常见状态码：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br")])]),_("h3",{attrs:{id:"_4-https协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-https协议"}},[t._v("#")]),t._v(" 4.\tHTTPS协议")]),t._v(" "),_("p",[t._v("HTTPS是身披SSL外壳的HTTP。HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。HTTPS为了追求性能，又要保证安全，采用了"),_("strong",[t._v("共享密钥加密和公开密钥加密混合")]),t._v("的方式进行报文传输。")]),t._v(" "),_("p",[t._v("公钥加密为了数据机密;私钥加密为了数据来源可靠、合法;")]),t._v(" "),_("h4",{attrs:{id:"_1-握手的详细过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-握手的详细过程"}},[t._v("#")]),t._v(" 1. \t握手的详细过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/https%E6%8F%A1%E6%89%8B.png",alt:"https握手"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/https%E8%AF%A6%E7%BB%86.png",alt:"https详细"}})]),t._v(" "),_("p",[_("strong",[t._v("HTTPS加密请求（四次握手）过程")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("客户端向服务器发送Client Hello消息，消息以明文的形式传输，里面包括客户端支持的协议版本、加密套件、压缩算法、客户端生成的一个随机数R1、扩展字段等。其中加密套件是四个功能的组合，即：认证算法（Au）、密钥交换算法（KeyExchange）、对称加密算法（Enc）和信息摘要算法，随机数R1则会在后面的密钥生成中使用到。")])]),t._v(" "),_("li",[_("p",[t._v("① 应对客户端发来的Client Hello，服务器将发送Server Hello消息进行响应，该消息以明文的形式传输，相应消息包括确认使用的协议版本、由服务器生成的随机数R2，确认使用的加密套件、确认使用的压缩方法。")]),t._v(" "),_("p",[t._v("② 在发完Server Hello消息后，服务器会马上将自己的Certificate（公钥证书）发送给客户端。")]),t._v(" "),_("p",[t._v("③ Server Key Exchange并非必需选项，只有在选用了DH算法的情况下，服务器需要将DH参数发送给客户端，若选择了RSA算法则不需要发送Server Key Exchange。")]),t._v(" "),_("p",[t._v("④ Certificate Request也并非必须选项，在对于安全性要求较高的场景中，服务器可要对客户端的身份进行认证，因此发起了对客户端公钥证书的请求，一般情况下浏览器都会内置一对独一无二的公私钥。")]),t._v(" "),_("p",[t._v("⑤ 由于第二次握手中包含一些可选选项，因此需要服务器发送一个Server Hello Done的消息，用来通知客户端Server Hello过程结束。")]),t._v(" "),_("p",[t._v("客户端收到Server Hello Done之后对服务器传来的证书进行验证，一般会验证证书是否在有效期内，随后根据CRL或者OCSP查询证书是否有效，最后根据证书链从根CA开始验证直到网站证书，以确保证书的真实性。在这个过程中若出现了验证不通过的结果，则抛出相应的错误；若验证通过，就再生成一个随机数Pre-master，并用服务器公钥进行加密，生成PreMaster Key。")])]),t._v(" "),_("li",[_("p",[t._v("① Client Key Exchange就是客户端将PreMaster Key发送给服务器，服务器则会用自己的私钥解密得出Pre-master。到这里客户端和服务器都拥有了三个随机数R1、R2和Pre-master，两边再用相同的算法和这三个随机数生成一个密钥，用于握手结束后传输数据的对称加密。")]),t._v(" "),_("p",[t._v("② Change Cipher Spec是客户端向服务器通知，后面发送的消息都会使用协商出来的密钥进行加密。")]),t._v(" "),_("p",[t._v("③ Encrypted Handshake Message是客户端向服务发送握手数据加密信息，该信息是客户端将前面"),_("strong",[t._v("发送和接受")]),t._v("的握手消息利用协商好的摘要算法生成摘要，再用协商好的密钥对摘要进行加密而的出来的，最后将加密信息发送给服务器，这是客户端发出的第一条加密信息。而服务器也会用协商好的密钥进行解密，若能成功解密则说明协商出来的密钥是一致的。")]),t._v(" "),_("p",[t._v("④ Certificate是在第二次握手的第4步有进行的情况下，即服务器有向客户端请求证书的情况才会有的，这一步是客户端向服务器发送客户端的证书，而服务器收到证书后也会对证书进行相同的验证。")])]),t._v(" "),_("li",[_("p",[t._v("① Change Cipher Spec是服务器向客户端通知，后面发送的消息都会使用协商出来的密钥进行加密。")]),t._v(" "),_("p",[t._v("② Encrypted Handshake Message与第三次握手类似，是服务器发给客户端的用来确定协商的密钥是一致的，也是一条Server Finish消息。")])])]),t._v(" "),_("h4",{attrs:{id:"_2-加密原理和过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-加密原理和过程"}},[t._v("#")]),t._v(" 2. \t加密原理和过程")]),t._v(" "),_("ul",[_("li",[t._v("非对称加密算法：RSA，DSA/DSS")]),t._v(" "),_("li",[t._v("对称加密算法：AES，RC4，3DES")]),t._v(" "),_("li",[t._v("信息摘要算法：MD5，SHA1，SHA256")])]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/image/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.assets/https%E5%8A%A0%E5%AF%86.jpg",alt:"https加密"}})]),t._v(" "),_("h4",{attrs:{id:"_3-摘要算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-摘要算法"}},[t._v("#")]),t._v(" 3.\t摘要算法")]),t._v(" "),_("ul",[_("li",[t._v("1、MD5 (Message Digest algorithm 5 消息摘要算法版本5)")]),t._v(" "),_("li",[t._v("2、SHA (Secure Hash Algorithm 安全散列算法)")]),t._v(" "),_("li",[t._v("3、MAC (Hash Message Authentication Code 散列消息鉴别码)")])]),t._v(" "),_("p",[t._v("消息摘要（Message Digest）又称为数字摘要（Digital Digest）。它是一个唯一对应一个消息或文本的固定长度的值，由一个单向Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。")]),t._v(" "),_("p",[t._v('消息摘要采用单向Hash函数将需加密的明文"摘要"成一串固定位数（如128bit）的密文，这一串密文亦称为数字指纹（Finger Print），它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是“真身”的“指纹”了。')]),t._v(" "),_("p",[t._v("消息摘要具有不可逆性，在消息摘要生成过程中，会丢失很多原文的信息，而且无法找回。一个好的摘要算法，是极难产生Hash碰撞的，也就是找到另一段明文经计算后产生相同的摘要。")]),t._v(" "),_("h4",{attrs:{id:"_4-数字签名：私钥加密，公钥验签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-数字签名：私钥加密，公钥验签"}},[t._v("#")]),t._v(" 4.\t数字签名：私钥加密，公钥验签")]),t._v(" "),_("p",[t._v("发送方：")]),t._v(" "),_("blockquote",[_("p",[t._v("1、用哈希函数将报文明文生成报文摘要")]),t._v(" "),_("p",[t._v("2、将摘要用私钥加密，生成数字签名")]),t._v(" "),_("p",[t._v("3、将明文和数字签名一起发送")])]),t._v(" "),_("p",[t._v("接收方：")]),t._v(" "),_("blockquote",[_("p",[t._v("1、用哈希函数将报文明文生成报文摘要")]),t._v(" "),_("p",[t._v("2、用公钥将数字签名解密，获取摘要")]),t._v(" "),_("p",[t._v("3、比较1和2步骤的摘要")])]),t._v(" "),_("h4",{attrs:{id:"_5-数字证书"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-数字证书"}},[t._v("#")]),t._v(" 5.\t数字证书")]),t._v(" "),_("p",[t._v("包含主机机构名称、公钥、CA的数字签名（CA用自己的私钥加密主机的公钥,防止公钥被冒充）。")])])}),[],!1,null,null,null);_.default=a.exports}}]);